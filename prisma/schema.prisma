// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    email    String    @unique
    password String
    cpf      String    @unique
    name     String
    cart     Cart[]
    address  Address[]
    orders   Order[]

    @@map("Users")
}

model Adm {
    id          String       @id @default(auto()) @map("_id") @db.ObjectId
    email       String       @unique
    password    String
    restaurants Restaurant[]
    Address     Address?     @relation(fields: [addressId], references: [id])
    addressId   String?      @db.ObjectId

    @@map("Adms")
}

model Cart {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    products Product[]
    User     User?     @relation(fields: [userId], references: [id])
    userId   String?

    @@map("Carts")
}

model Product {
    id           String      @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    price        Int
    description  String
    type         String
    discount     String?
    Cart         Cart?       @relation(fields: [cartId], references: [id])
    cartId       String?
    Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
    restaurantId String?

    @@map("Products")
}

model Restaurant {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    logo      String?
    cnpj      String    @unique
    Adm       Adm?      @relation(fields: [admId], references: [id])
    admId     String?
    product   Product[]
    address   Address   @relation(fields: [addressId], references: [id])
    addressId String
    Order     Order[]

    @@map("Restaurants")
}

model Address {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    state      String
    city       String
    cep        String
    district   String
    street     String
    number     Int
    latitude   String?
    longitude  String?
    User       User?        @relation(fields: [userId], references: [id])
    userId     String?
    restaurant Restaurant[]
    Order      Order[]
    adms       Adm[]

    @@map("Address")
}

model Order {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    frete        Int
    total        Int
    subtotal     Int
    pay          Boolean
    delivered    Boolean
    payment      String
    latitude     String
    longitude    String
    User         User?      @relation(fields: [userId], references: [id])
    userId       String?
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId String
    address      Address    @relation(fields: [addressId], references: [id])
    addressId    String

    @@map("Orders")
}
